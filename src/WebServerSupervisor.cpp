#include <Arduino.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <SPIFFS.h>
#include "FS.h"
#include <LittleFS.h>
#include "SD.h"
#include "burner_bms.h"
#include "bms.h"

#include "EmbeddedFiles_AutoGenerated.h"
#include "EmbeddedFiles_Integrity.h"
#include "WebServerSupervisor.h"

// https://github.com/me-no-dev/ESPAsyncWebServer

AsyncWebServer server(80);

const char *ssid = "burnerboard";
const char *password = "firetruck";

const char *PARAM_MESSAGE = "message";

static String TAG = "WebServerSupervisor";

String WebServerSupervisor::UUIDString;

void notFound(AsyncWebServerRequest *request)
{
  BLog_d(TAG, "http url not found  %s", request->url());
  request->send(404, "text/plain", "Not found");
}

WebServerSupervisor::WebServerSupervisor()
{
}

String WebServerSupervisor::uuidToString(uint8_t *uuidLocation)
{
  String string = "";
  int i;
  for (i = 0; i < 16; i++)
  {
    if (i == 4)
      string += "-";
    if (i == 6)
      string += "-";
    if (i == 8)
      string += "-";
    if (i == 10)
      string += "-";
    int topDigit = uuidLocation[i] >> 4;
    int bottomDigit = uuidLocation[i] & 0x0f;
    // High hex digit
    string += "0123456789abcdef"[topDigit];
    // Low hex digit
    string += "0123456789abcdef"[bottomDigit];
  }

  return string;
}

void WebServerSupervisor::generateUUID()
{
  // SERIAL_DEBUG.print("generateUUID=");
  uint8_t uuidNumber[16]; // UUIDs in binary form are 16 bytes long

  // ESP32 has inbuilt random number generator
  // https://techtutorialsx.com/2017/12/22/esp32-arduino-random-number-generation/
  for (uint8_t x = 0; x < 16; x--)
    uuidNumber[x] = random(0xFF);

  UUIDString = uuidToString(uuidNumber);
}

bool WebServerSupervisor::validateXSS(AsyncWebServerRequest *request)
{
  if (request->hasHeader("Cookie"))
  {
    AsyncWebHeader *cookie = request->getHeader("Cookie");
    if (cookie->value().startsWith("BURNERBMS_XSS="))
    {
      if (cookie->value().substring(11).equals(WebServerSupervisor::UUIDString))
      {
        if (request->hasParam("xss", true))
        {
          AsyncWebParameter *p1 = request->getParam("xss", true);

          if (p1->value().equals(WebServerSupervisor::UUIDString) == true)
          {
            return true;
          }
        }
      }
    }
  }
  request->send(500, "text/plain", "XSS invalid");
  return false;
}

void WebServerSupervisor::SendSuccess(AsyncWebServerRequest *request)
{
  AsyncResponseStream *response = request->beginResponseStream("application/json");
  StaticJsonDocument<100> doc;
  doc["success"] = true;
  serializeJson(doc, *response);
  request->send(response);
}

void WebServerSupervisor::SendFailure(AsyncWebServerRequest *request)
{
  request->send(500, "text/plain", "Failed");
}

void WebServerSupervisor::SetCacheAndETagGzip(AsyncWebServerResponse *response, String ETag)
{
  response->addHeader("Content-Encoding", "gzip");
  SetCacheAndETag(response, ETag);
}
void WebServerSupervisor::SetCacheAndETag(AsyncWebServerResponse *response, String ETag)
{
  response->addHeader("ETag", ETag);
  response->addHeader("Cache-Control", "no-cache, max-age=86400");
}

String WebServerSupervisor::TemplateProcessor(const String &var)
{
  BLog_d(TAG, "processing template for %s", var);

  if (var == "XSS_KEY")
    return WebServerSupervisor::UUIDString;

#if defined(ESP8266)
  if (var == "PLATFORM")
    return String("ESP8266");
#endif

#if defined(ESP32)
  if (var == "PLATFORM")
    return String("ESP32");
#endif

  if (var == "GIT_VERSION")
    return String("1.0");

  if (var == "COMPILE_DATE_TIME")
    return String("Jan 2024");

  //  const DEFAULT_GRAPH_MAX_VOLTAGE = %graph_voltagehigh%;
  //  const DEFAULT_GRAPH_MIN_VOLTAGE = %graph_voltagelow%;

  if (var == "graph_voltagehigh")
    return String((float)bms.getVoltageLimHighMv()/1000.0);

  if (var == "graph_voltagelow")
    return String((float)bms.getVoltageLimLowMv() / 1000.0);

  if (var == "integrity_file_jquery_js")
    return String(integrity_file_jquery_js);

  return String();
}

void WebServerSupervisor::PrintStreamCommaBoolean(AsyncResponseStream *response, const char *text, bool boolean)
{
  response->print(text);
  if (boolean)
  {
    response->print("true");
  }
  else
  {
    response->print("false");
  }
  response->print(',');
}
void WebServerSupervisor::PrintStreamComma(AsyncResponseStream *response, const char *text, uint32_t value)
{
  response->print(text);
  response->print(value);
  response->print(',');
}
void WebServerSupervisor::PrintStream(AsyncResponseStream *response, const char *text, uint32_t value)
{
  response->print(text);
  response->print(value);
}

void WebServerSupervisor::monitor2(AsyncWebServerRequest *request)
{

  bms.update(); 
  
  uint8_t totalcells = bms.getNumberCells();
  const char comma = ',';
  const char *null = "null";
  BLog_d(TAG, "monitor2");

  AsyncResponseStream *response = request->beginResponseStream("application/json");

  PrintStreamComma(response, "{\"banks\":", 1);
  PrintStreamComma(response, "\"seriescells\":", totalcells);

  // voltages
  response->print(F("\"voltages\":["));

  for (uint8_t i = 0; i < totalcells; i++)
  {
    // Comma if not zero
    if (i)
      response->print(comma);

    response->print(bms.getCellVoltageMv(i));
  }
  response->print("],");

  response->print(F("\"minvoltages\":["));

  for (uint8_t i = 0; i < totalcells; i++)
  {
    // Comma if not zero
    if (i)
      response->print(comma);

    response->print(bms.getCellVoltageMinMv(i));
  }
  response->print("],");

  // maxvoltages

  response->print(F("\"maxvoltages\":["));

  for (uint8_t i = 0; i < totalcells; i++)
  {
    // Comma if not zero
    if (i)
      response->print(comma);

    response->print(bms.getCellVoltageMaxMv(i));
  }
  response->print("]");

  response->print(comma);

  // inttemp
  response->print(F("\"inttemp\":["));

  for (uint8_t i = 0; i < totalcells; i++)
  {
    // Comma if not zero
    if (i)
      response->print(comma);

    if (i == 0) {
      response->print(bms.getChipTempC());
    } else {
      response->print(bms.getFETTempC());
    }
  }
  response->print("]");

  response->print(comma);

  // inttemp remove
  response->print(F("\"exttemp\":["));

  for (uint8_t i = 0; i < totalcells; i++)
  {
    // Comma if not zero
    if (i)
      response->print(comma);

        if (i == 0) {
      response->print(bms.getMinCellTemp());
    } else {
      response->print(bms.getMaxCellTemp());
    }
  }
  response->print("]");

  response->print(comma);

  // bypass
  response->print(F("\"bypass\":["));

  for (uint8_t i = 0; i < totalcells; i++)
  {
    // Comma if not zero
    if (i)
      response->print(comma);
    response->print(bms.isCellBalancing(i));
  }
  response->print("]");
  response->print(comma);

  response->print(F("\"bankv\":["));
  response->print(bms.getVoltageMv());
  response->print("]");
  response->print(comma);

  response->print(F("\"voltrange\":["));
  response->print(bms.getVoltageRangeMv());
  response->print("]");
  response->print(comma);

  response->print(F("\"soc\":["));
  response->print(bms.getSocPct());
  response->print("]");
  response->print(comma);

  response->print(F("\"soh\":["));
  response->print(bms.getSohPct());
  response->print("]");
  response->print(comma);

  response->print(F("\"remainingCapacityMah\":["));
  response->print(bms.getRemainingCapacityMah());
  response->print("]");
  response->print(comma);

  response->print(F("\"fullChargeCapacityMah\":["));
  response->print(bms.getFullChargeCapacityMah());
  response->print("]");
  response->print(comma);

  response->print(F("\"currentMa\":["));
  response->print(bms.getCurrentMa());
  response->print("]");

  // The END...
  response->print('}');
  response->addHeader("Cache-Control", "no-store");

  request->send(response);
}

void WebServerSupervisor::monitor3(AsyncWebServerRequest *request)
{
  AsyncResponseStream *response = request->beginResponseStream("application/json");

  uint8_t totalModules = bms.getNumberCells();
  uint8_t comma = totalModules - 1;
  BLog_d(TAG, "monitor3");

  response->print("{\"balcurrent\":[");

  for (uint8_t i = 0; i < totalModules; i++)
  {
    response->print(bms.getCellBalanceCurrentCount(i));
    if (i < comma)
    {
      response->print(',');
    }
  }

  response->print("]}");

  response->addHeader("Cache-Control", "no-store");
  request->send(response);
}

void WebServerSupervisor::init()
{
  BLog_d(TAG, "Web Server");

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  BLog_d(TAG, "WIFI Begin finished");

  if (WiFi.waitForConnectResult() != WL_CONNECTED)
  {
    BLog_e(TAG, "WiFi Failed!\n");
    return;
  }

  BLog_d(TAG, "IP Address: %s", WiFi.localIP().toString());

  if (WiFi.waitForConnectResult() != WL_CONNECTED)
  {
    BLog_e(TAG, "WiFi Failed!\n");
    return;
  }

  BLog_d(TAG, "IP Address: %s", WiFi.localIP().toString());

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request)
            {
              BLog_d(TAG, "root http request");
              request->redirect("/default.htm"); });

  server.on("/default.htm", HTTP_GET,
            [](AsyncWebServerRequest *request)
            {
              AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", (char *)file_default_htm, WebServerSupervisor::TemplateProcessor);
              response->addHeader("Cache-Control", "no-store");
              request->send(response);
            });

  server.on("/burnerbms.png", HTTP_GET,
            [](AsyncWebServerRequest *request)
            {
              if (request->header("If-None-Match").equals(String(etag_file_burnerbms_png)))
              {
                request->send(304);
              }
              else
              {
                AsyncWebServerResponse *response = request->beginResponse_P(200, "image/png", file_burnerbms_png, size_file_burnerbms_png);
                SetCacheAndETag(response, String(etag_file_burnerbms_png));
                request->send(response);
              }
            });

  server.on("/style.css", HTTP_GET,
            [](AsyncWebServerRequest *request)
            {
              if (request->header("If-None-Match").equals(String(etag_file_style_css_gz)))
              {
                request->send(304);
              }
              else
              {
                AsyncWebServerResponse *response = request->beginResponse_P(200, "text/css", file_style_css_gz, size_file_style_css_gz);
                SetCacheAndETagGzip(response, String(etag_file_style_css_gz));
                request->send(response);
              }
            });

  server.on("/jquery.js", HTTP_GET,
            [](AsyncWebServerRequest *request)
            {
              if (request->header("If-None-Match").equals(String(etag_file_jquery_js_gz)))
              {
                request->send(304);
              }
              else
              {
                AsyncWebServerResponse *response = request->beginResponse_P(200, "application/javascript", file_jquery_js_gz, size_file_jquery_js_gz);
                SetCacheAndETagGzip(response, String(etag_file_jquery_js_gz));
                request->send(response);
              }
            });

  // Send a GET request to <IP>/get?message=<message>
  server.on("/get", HTTP_GET, [](AsyncWebServerRequest *request)
            {
        String message;
        if (request->hasParam(PARAM_MESSAGE)) {
            message = request->getParam(PARAM_MESSAGE)->value();
        } else {
            message = "No message sent";
        }
        request->send(200, "text/plain", "Hello, GET: " + message); });

  // Send a POST request to <IP>/post with a form field message set to <message>
  server.on("/post", HTTP_POST, [](AsyncWebServerRequest *request)
            {
        String message;
        if (request->hasParam(PARAM_MESSAGE, true)) {
            message = request->getParam(PARAM_MESSAGE, true)->value();
        } else {
            message = "No message sent";
        }
        request->send(200, "text/plain", "Hello, POST: " + message); });

  server.on("/wait.png", HTTP_GET,
            [](AsyncWebServerRequest *request)
            {
              if (request->header("If-None-Match").equals(String(etag_file_wait_png)))
              {
                request->send(304);
              }
              else
              {
                AsyncWebServerResponse *response = request->beginResponse_P(200, "image/png", file_wait_png, size_file_wait_png);
                SetCacheAndETag(response, String(etag_file_wait_png));
                request->send(response);
              }
            });
  server.on("/echarts.min.js", HTTP_GET,
            [](AsyncWebServerRequest *request)
            {
              if (request->header("If-None-Match").equals(String(etag_file_echarts_min_js_gz)))
              {
                request->send(304);
              }
              else
              {
                AsyncWebServerResponse *response = request->beginResponse_P(200, "application/javascript", file_echarts_min_js_gz, size_file_echarts_min_js_gz);
                SetCacheAndETagGzip(response, String(etag_file_echarts_min_js_gz));
                request->send(response);
              }
            });

  server.on("/echarts_gl.min.js", HTTP_GET,
            [](AsyncWebServerRequest *request)
            {
              if (request->header("If-None-Match").equals(String(etag_file_echarts_gl_min_js_gz)))
              {
                request->send(304);
              }
              else
              {
                AsyncWebServerResponse *response = request->beginResponse_P(200, "application/javascript", file_echarts_gl_min_js_gz, size_file_echarts_gl_min_js_gz);
                SetCacheAndETagGzip(response, String(etag_file_echarts_gl_min_js_gz));
                request->send(response);
              }
            });
  server.on("/pagecode.js", HTTP_GET,
            [](AsyncWebServerRequest *request)
            {
              if (request->header("If-None-Match").equals(String(etag_file_pagecode_js_gz)))
              {
                request->send(304);
              }
              else
              {
                AsyncWebServerResponse *response = request->beginResponse_P(200, "application/javascript", file_pagecode_js_gz, size_file_pagecode_js_gz);
                SetCacheAndETagGzip(response, String(etag_file_pagecode_js_gz));
                request->send(response);
              }
            });

  // server->on("/cells.json", HTTP_GET, WebServerSupervisor::cells);

  server.on("/monitor2.json", HTTP_GET, WebServerSupervisor::monitor2);
  server.on("/monitor3.json", HTTP_GET, WebServerSupervisor::monitor3);

  server.onNotFound(notFound);

  server.begin();
}
