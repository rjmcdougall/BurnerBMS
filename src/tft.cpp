

#include "burner_bms.h"
#include <WiFi.h>
#include <esp_wifi.h>
#include <JPEGDecoder.h>
#include "tft_jpeg.h"
#include "EmbeddedFiles_AutoGenerated.h"
#include "EmbeddedFiles_Integrity.h"
#include "tft.h"
#include "bms.h"

#include <M5GFX.h>
M5GFX display;

#define USE_ESP_IDF_LOG 1
static constexpr const char *  TAG = "tft";

int16_t  TFT::fontHeight_2;
int16_t  TFT::fontHeight_4;


void TFT::TFTDrawWifiDetails()
{
    display.setTextDatum(TL_DATUM);

    int16_t y = display.height() - fontHeight_2;
    ;
    display.fillRect(0, y, display.width(), display.height() - y, TFT_DARKGREY);
    display.setTextFont(2);
    display.setTextColor(TFT_BLACK, TFT_DARKGREY);
    int16_t x = 2;

    if (WiFi.isConnected())
    {
        x += display.drawString(WiFi.getHostname(), x, y);
        x += 10;
        x += display.drawString(WiFi.localIP().toString(), x, y);

        //Draw RSSI on bottom right corner
        //Received Signal Strength in dBm
        x += 10;
        x += display.drawNumber(WiFi.RSSI(), x, y);
        x += display.drawString("dBm", x, y);
    }
    else
    {
        x += display.drawString("WIFI not connected", x, y);
    }

}


void  TFT::PrepareTFT_Error()
{
    //Assumes the Mutex is already obtained by caller
    display.fillScreen(TFT_BLACK);
    // Errors have priority, draw filled red box
    display.fillRoundRect(16, 16, display.width() - 32, display.height() - 48, 8, TFT_RED);

    // White outline
    display.drawRoundRect(16 + 2, 16 + 2, display.width() - 36, display.height() - 52, 8, TFT_LIGHTGREY);

    TFTDrawWifiDetails();
}


void  TFT::PrepareTFT_Voltage()
{
    //Assumes the Mutex is already obtained by caller

    display.fillScreen(TFT_BLACK);
    //We have a single bank/pack
    display.setTextColor(TFT_LIGHTGREY, TFT_BLACK);

    drawArrayJpeg(file_batteryicon_jpg, size_file_batteryicon_jpg, 0, 0);

    int16_t w = display.width();
    //Take off the wifi banner height
    int16_t h = display.height() - fontHeight_2 - 100;

    const int16_t xoffset = 32;

    display.setTextFont(2);
    //Need to think about multilingual strings in the longer term
    //display.drawString("Bank voltage", xoffset + 0, 0);
    display.drawString("External temp", xoffset + 0, h);
    display.drawString("Module temp", xoffset + w / 2, h);
    display.drawString("Cell voltage", xoffset + 0, 44 + h);
    //display.drawString("Modules balancing", xoffset + w / 2, 44 + h);
    display.drawString("CAN", xoffset + w / 2, 44 + h);

    TFTDrawWifiDetails();
}

void  TFT::init()
{
    display.begin();
    display.setRotation(1);
    fontHeight_2 = display.fontHeight(2);
    fontHeight_4 = display.fontHeight(4);
    PrepareTFT_Voltage();
    //TFTScreenBacklight(true);
}


int  TFT::last_soc_width = 999;

void  TFT::DrawTFT_Voltage()
{
    ESP_LOGD(TAG, "OneBank");

    //Single bank, large font
    display.setTextColor(TFT_GREEN, TFT_BLACK);
    //Large FONT 8 - 75 pixel high (only numbers available)
    //Top centre
    display.setTextDatum(TC_DATUM);
    display.setTextFont(8);

    const int16_t xoffset = 32;
    const int16_t yoffset = 90;
    //    int16_t y = fontHeight_2;
    int16_t y = yoffset;
    int16_t x = display.width() / 2;

    int16_t x_width = bms.getSocPct() * 262 / 100;
    if (x_width != last_soc_width)
    {
        //x += display.drawFloat(value, 2, x, y);
        //x += display.drawNumber(value, x, y);
        //x += display.drawString("%%", x, y);
        //Clear right hand side of display
        drawArrayJpeg(file_batteryicon_jpg, size_file_batteryicon_jpg, 0, 0);
        //display.fillRect(20, 6, x_width, 68, TFT_GREEN);
        display.fillRect(20 + x_width, 6, 262 - x_width, 68, TFT_BLACK);
    }
    last_soc_width = x_width;

    //Top left
    display.setTextDatum(TL_DATUM);
    display.setTextFont(4);

    //Cell temperatures and stuff
    int16_t h = display.height() - fontHeight_2 - 100;

    y = h;
    x = xoffset + 0;
    float value = bms.getVoltageMv() / 1000.0;
    x += display.drawFloat(value, 2, x, y);

    //blank out gap between numbers
    display.fillRect(x, y, (display.width() / 2) - x, fontHeight_4, TFT_BLACK);

    x = xoffset + display.width() / 2;
    y = h + fontHeight_2;
    x += display.drawNumber(bms.getMinCellTemp(), x, y);
    x += display.drawString(" / ", x, y);
    x += display.drawNumber(bms.getMaxCellTemp(), x, y);
    //blank out gap between numbers
    display.fillRect(x, y, display.width() - x, fontHeight_4, TFT_BLACK);

    //Cell voltage ranges
    y = h + fontHeight_4 + fontHeight_2 + fontHeight_2 + 2;
    x = xoffset + 0;
    value = bms.getVoltageRangeMv();
    x += display.drawNumber(value, x, y);
    x += display.drawString("mV ", x, y);
    //blank out gap between numbers
    display.fillRect(x, y, display.width() / 2 - x, fontHeight_4, TFT_BLACK);

    y = h + fontHeight_4 + fontHeight_2 + fontHeight_2 + 2;
    x = xoffset + display.width() / 2;
    x += display.drawNumber(0, x, y); //canRxCnt
    x += display.drawString(" / ", x, y);
    x += display.drawNumber(0, x, y); //canTxCnt
    //blank out gap between numbers
    display.fillRect(x, y, display.width() - x, fontHeight_4, TFT_BLACK);
}

/*
void DrawTFT_Error()
{
    display.setTextColor(TFT_WHITE, TFT_RED);
    //uint16_t y = 16 + 6;

    for (size_t i = 0; i < sizeof(rules.ErrorCodes); i++)
    {
        if (rules.ErrorCodes[i] != InternalErrorCode::NoError)
        {
            //Centre screen
            display.setTextFont(2);
            uint16_t x = display.width() / 2;
            uint16_t y = display.height() / 2 - fontHeight_4 * 2;
            //Centre/middle text
            display.setTextDatum(TC_DATUM);

            switch (rules.ErrorCodes[i])
            {
            case InternalErrorCode::CommunicationsError:
            {
                display.drawCentreString("Module", x, y, 4);
                y += fontHeight_4;
                display.drawCentreString("communications", x, y, 4);
                y += fontHeight_4;
                display.drawCentreString("error", x, y, 4);
                break;
            }
            case InternalErrorCode::ModuleCountMismatch:
            {
                display.drawCentreString("Module count", x, y, 4);
                y += fontHeight_4;
                display.drawCentreString("mismatch", x, y, 4);
                break;
            }
            case InternalErrorCode::TooManyModules:
            {
                display.drawCentreString("Too many", x, y, 4);
                y += fontHeight_4;
                display.drawCentreString("modules", x, y, 4);
                break;
            }
            case InternalErrorCode::WaitingForModulesToReply:
            {
                display.drawCentreString("Waiting for", x, y, 4);
                y += fontHeight_4;
                display.drawCentreString("modules to", x, y, 4);
                y += fontHeight_4;
                display.drawCentreString("reply", x, y, 4);

                break;
            }
            case InternalErrorCode::ZeroVoltModule:
            {
                display.drawCentreString("Module returned", x, y, 4);
                y += fontHeight_4;
                display.drawCentreString("zero volt", x, y, 4);
                y += fontHeight_4;
                display.drawCentreString("reading", x, y, 4);
                break;
            }
            case InternalErrorCode::ControllerMemoryError:
            {
                display.drawCentreString("Controller", x, y, 4);
                y += fontHeight_4;
                display.drawCentreString("memory error", x, y, 4);
                break;
            }
            case InternalErrorCode::ErrorEmergencyStop:
            {
                display.drawCentreString("Emergency", x, y, 4);
                y += fontHeight_4;
                display.drawCentreString("STOP", x, y, 4);
                break;
            }
            default:
                display.drawCentreString("Error with", x, y, 4);
                y += fontHeight_4;
                display.drawCentreString("no text", x, y, 4);
                break;
            }

            //Only show first error
            break;
        }
    }
}

*/